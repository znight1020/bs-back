plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'toy'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // PERSIST
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // SMTP
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // TEST
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // TEST CONTAINER
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testImplementation 'org.testcontainers:mysql:1.19.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport', 'jacocoTestCoverageVerification'
}

configurations {
    unitTestImplementation.extendsFrom testImplementation, implementation
    unitTestAnnotationProcessor.extendsFrom annotationProcessor
    integrationTestImplementation.extendsFrom testImplementation, implementation
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
}

sourceSets {
    test {
        java.srcDirs = ['src/test/unit/java']
        resources {
            srcDirs = ['src/test/unit/resources']
        }
    }

    unitTest {
        java.srcDirs = ['src/test/unit']
        resources {
            srcDir 'src/test/unit/resources'
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    integrationTest {
        java.srcDirs = ['src/test/intg']
        resources {
            srcDir 'src/test/intg/resources'
        }
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

tasks.register('unitTest', Test) {
    description = "Runs unit tests"
    group = "verification"
    testClassesDirs = sourceSets.unitTest.output.classesDirs
    classpath = sourceSets.unitTest.runtimeClasspath
    useJUnitPlatform()
}
unitTest.finalizedBy(clean)

tasks.register('integrationTest', Test) {
    description = "Runs integration tests"
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}
integrationTest.finalizedBy(clean)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            excludes = [
                    'com.bob.BookSwapApplication',
                    'com.bob.global.audit.BaseTime',
                    'com.bob.**.config.**',
                    'com.bob.**.request.**',
                    'com.bob.**.response.**',
                    'com.bob.**.command.**',
                    'com.bob.**.query.**',
                    'com.bob.**.symbol.**',
            ]

            // LINE 커버리지
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // BRANCH 커버리지
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
        //xml.required.set(false)
        //csv.required.set(false)
    }
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'com.bob.global.audit.BaseTime',
                        'com/bob/BookSwapApplication.class'
                ])
            })
    )
}
